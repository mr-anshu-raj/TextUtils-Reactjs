{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","class","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalise","msg","data-bs-dismiss","aria-label","About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setmyStyle","_useState3","_useState4","btnText","setbtnText","className","style","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","Mode","dist","to","title","aria-current","aboutText","togglemode","htmlFor","defaultProptypes","TextForm","text","setText","Fragment","heading","value","onChange","event","target","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","trim","length","App","setMode","setAlert","message","setTimeout","body","components_Alert","react_router_dist","path","element","components_TextForm","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.8db6140d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalise =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n        //border: '1px solid white'\r\n    })\r\n\r\n    const [btnText, setbtnText] = useState(\"Dark Mode\")\r\n\r\n    const toggleStyle = ()=>{\r\n        if (myStyle.color==='white') {\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setbtnText(\"Dark Mode\");\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setbtnText(\"Light Mode\");\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className='container'  style={myStyle}>\r\n        <br></br>\r\n        <h3>About Us</h3>\r\n        <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\">\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"flush-headingOne\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseOne\" aria-expanded=\"false\" aria-controls=\"flush-collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"flush-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingOne\" data-bs-parent=\"#accordionFlushExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the first item's accordion body.</div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"flush-headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseTwo\" aria-expanded=\"false\" aria-controls=\"flush-collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"flush-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingTwo\" data-bs-parent=\"#accordionFlushExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the second item's accordion body. Let's imagine this being filled with some actual content.</div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"flush-headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseThree\" aria-expanded=\"false\" aria-controls=\"flush-collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"flush-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingThree\" data-bs-parent=\"#accordionFlushExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.</div>\r\n            </div>\r\n        </div>\r\n\r\n        <div className='container my-3'>\r\n        <button onClick={toggleStyle} type=\"button\" class=\"btn btn-dark\">{btnText}</button>\r\n        </div>\r\n\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.Mode} bg-${props.Mode}`}>\r\n        <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li>\r\n                </ul>\r\n                \r\n                <div className={`form-check form-switch text-${props.Mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/> {/*role=switch*/}\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">EnableDarkMode</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProptypes ={\r\n    title: 'Title',\r\n    aboutText: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nconst TextForm = (props) => {\r\n    const [text, setText] = useState('Enter text here');\r\n    //setText('new text');\r\n\r\n\r\n    const handleUpClick = () =>{\r\n        //console.log(\"uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleLoClick = () =>{\r\n        //console.log(\"uppercase was clicked\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        //console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy =()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n\r\n    /*const count = ()=>{\r\n        if (text.length>0){\r\n            text.trim().split(/[ ]+/);\r\n            let ct=0;\r\n            for (let i = 0; i < text.length; i++){\r\n                if(text[i]===\" \");\r\n                ct+=1;\r\n            }\r\n            return ct;\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }*/\r\n\r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.Mode==='light'?'grey':'white'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" style={{backgroundColor: props.Mode==='light'?'white':'grey', \r\n            color: props.Mode==='light'?'black':'white'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className='btn btn-primary mx-1' onClick={handleUpClick}>Convert to uppercase</button>\r\n        <button className='btn btn-primary mx-1' onClick={handleLoClick}>Convert to lowercase</button>\r\n        <button className='btn btn-primary mx-1' onClick={handleCopy}>Copy Text</button>\r\n        <button className='btn btn-primary mx-1' onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n    </div>\r\n    <div className='container my-3' style={{color: props.Mode==='light'?'grey':'white'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.trim().length === 0 ? 0 : text.trim().split(\" \").length} words and {text.length} character</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TextForm\r\n","import { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n\n  const togglemode = () => {\n    if(Mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor= '#23294a';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar title=\"Textutils\" aboutText=\"About Textutils\" Mode={Mode} togglemode={togglemode}/>\n      <Alert alert={alert}/>\n      <div className='container my-3'>\n        <Routes>\n          <Route path=\"/about\" element={<About />}/>\n          <Route path=\"/\" element={<TextForm heading=\"Enter the text here\" Mode={Mode} showAlert={showAlert}/>}/>\n        </Routes>\n      </div>\n      </Router>\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}