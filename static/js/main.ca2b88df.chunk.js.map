{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","class","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalise","msg","data-bs-dismiss","aria-label","Navbar","className","Mode","dist","to","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","onClick","togglemode","htmlFor","defaultProptypes","aboutText","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","trim","length","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","components_TextForm","react_router_dist","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ca2b88df.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalise =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.Mode} bg-${props.Mode}`}>\r\n        <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    {/*<li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li>*/}\r\n                </ul>\r\n                \r\n                <div className={`form-check form-switch text-${props.Mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/> {/*role=switch*/}\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">EnableDarkMode</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProptypes ={\r\n    title: 'Title',\r\n    aboutText: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nconst TextForm = (props) => {\r\n    const [text, setText] = useState('Enter text here');\r\n    //setText('new text');\r\n\r\n\r\n    const handleUpClick = () =>{\r\n        //console.log(\"uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleLoClick = () =>{\r\n        //console.log(\"uppercase was clicked\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        //console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy =()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n\r\n    /*const count = ()=>{\r\n        if (text.length>0){\r\n            text.trim().split(/[ ]+/);\r\n            let ct=0;\r\n            for (let i = 0; i < text.length; i++){\r\n                if(text[i]===\" \");\r\n                ct+=1;\r\n            }\r\n            return ct;\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }*/\r\n\r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.Mode==='light'?'grey':'white'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" style={{backgroundColor: props.Mode==='light'?'white':'grey', \r\n            color: props.Mode==='light'?'black':'white'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className='btn btn-primary mx-1' onClick={handleUpClick}>Convert to uppercase</button>\r\n        <button className='btn btn-primary mx-1' onClick={handleLoClick}>Convert to lowercase</button>\r\n        <button className='btn btn-primary mx-1' onClick={handleCopy}>Copy Text</button>\r\n        <button className='btn btn-primary mx-1' onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n    </div>\r\n    <div className='container my-3' style={{color: props.Mode==='light'?'grey':'white'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.trim().length === 0 ? 0 : text.trim().split(\" \").length} words and {text.length} character</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TextForm\r\n","import { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n\n  const togglemode = () => {\n    if(Mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor= '#23294a';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar title=\"Textutils\" aboutText=\"About Textutils\" Mode={Mode} togglemode={togglemode}/>\n      <Alert alert={alert}/>\n      <TextForm heading=\"Enter the text here\" Mode={Mode} showAlert={showAlert}/>\n      <div className='container my-3'>\n        <Routes>\n          {/*<Route path=\"/about\" element={<About />}/>*/}\n          {/*<Route path=\"/\" element={}/>*/}\n        </Routes>\n      </div>\n      </Router>\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}